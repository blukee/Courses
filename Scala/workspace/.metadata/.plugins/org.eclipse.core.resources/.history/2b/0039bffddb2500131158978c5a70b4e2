package week3

object rationals {
  val x = new Rational(1, 2)                      //> x  : week3.Rational = 1/2
  val y = new Rational(5, 7)                      //> y  : week3.Rational = 5/7
  val z = new Rational(3, 2)                      //> z  : week3.Rational = 3/2
 	x - y - z                                 //> res0: week3.Rational = 12/-7
 	y + y
  x < y                                           //> res1: Boolean = true
  x max z                                         //> res2: week3.Rational = 3/2
 

  
}

class Rational(x: Int, y: Int) {
	require(y != 0, "denominator must be nonzero")
	
	def this(x: Int) = this(x, 1)
	
	private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
	def numer = x
	def denom = y
	
	def < (that: Rational) = numer * that.denom < that.numer * denom
	
	def max(that: Rational) = if (this < that) that else this
	
	def + (that: Rational) =
		new Rational(
			numer * that.denom + that.numer * denom,
			denom * that.denom)
	
	def addRational(r: Rational, s: Rational): Rational =
		new Rational(
			r.numer * s.denom + s.numer * r.denom,
			r.denom * s.denom)
			
	def neg: Rational = new Rational(-numer, denom)
	
	def - (that: Rational) = this + that.neg
			
	override def toString = {
		val g = gcd(numer, denom)
		numer / g + "/" + denom / g
	}
}