package week3

object rationals {
  val x = new Rational(1, 2)                      //> x  : week3.Rational = 1/2
  val y = new Rational(5, 7)                      //> y  : week3.Rational = 5/7
  val z = new Rational(3, 2)                      //> z  : week3.Rational = 3/2
  x.sub(y).sub(z)                                 //> res0: week3.Rational = 12/-7
  x.less(y)                                       //> res1: Boolean = true
  x.max(z)                                        //> res2: week3.Rational = 3/2
  val strange = new Rational(1, 0)                //> java.lang.IllegalArgumentException: requirement failed: denominator must be 
                                                  //| nonzero
                                                  //| 	at scala.Predef$.require(Predef.scala:233)
                                                  //| 	at week3.Rational.<init>(week3.rationals.scala:15)
                                                  //| 	at week3.rationals$$anonfun$main$1.apply$mcV$sp(week3.rationals.scala:10
                                                  //| )
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at week3.rationals$.main(week3.rationals.scala:3)
                                                  //| 	at week3.rationals.main(week3.rationals.scala)
  strange.add(strange)
}

class Rational(x: Int, y: Int) {
	require(y != 0, "denominator must be nonzero")
	
	def this(x: Int) = this(x, 1)
	
	private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
	private val g = gcd(x, y)
	def numer = x / g
	def denom = y / g
	
	def less(that: Rational) = numer * that.denom < that.numer * denom
	
	def max(that: Rational) = if (this.less(that)) that else this
	
	def add(that: Rational) =
		new Rational(
			numer * that.denom + that.numer * denom,
			denom * that.denom)
	
	def addRational(r: Rational, s: Rational): Rational =
		new Rational(
			r.numer * s.denom + s.numer * r.denom,
			r.denom * s.denom)
			
	def neg: Rational = new Rational(-numer, denom)
	
	def sub(that: Rational) = add(that.neg)
			
	override def toString = numer + "/" + denom
}